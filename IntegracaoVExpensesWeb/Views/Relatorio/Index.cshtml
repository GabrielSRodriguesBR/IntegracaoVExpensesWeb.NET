@using System.Globalization
@using IntegracaoVExpensesWeb.Business.Utils
@model IntegracaoVExpensesWeb.Models.RelatorioFilterViewModel
@{
    ViewBag.Title1 = "Relatório de despesas";
}
<script>


    const ReloadDados = (id) => {
	    const mes = $(id).data('mes');
	    const ano = $(id).data('ano');
	    $(id).showLoadingMessage();
	    $(id).load('@Url.Action("_DadosRelatorio")', { mes: mes, ano: ano });
    }


    const GetRelatorios = (key) => {
        return $(`.table_pendentes_${key} table .relatorioId`).map((i, e) => { return $(e).data('id') }).get();
    }

    const GetRelatoriosPag = (key) => {
        return $(`.table_pendentes_pag_${key} table .relatorioId`).map((i, e) => { return $(e).data('id') }).get();
    }

    const IntegrarDespesasSAP = (key) => {
        const listaRelatorios = GetRelatorios(key);
		if (listaRelatorios.length > 0) {

			bootbox.confirm({
				title: 'Confirmar',
				message: 'Confirmar a integração de despesas com SAP?',
				buttons: {
					confirm: {
						label: '<i class="fa fa-check"></i> OK',
						className: 'btn-success'
					},
					cancel: {
						label: '<i class="fa fa-times"></i> Cancelar',
						className: 'btn-danger'
					}
				},
				callback: function (result) {
					if (!result) return;
                    $('button').prop('disabled', true);
                    let dialog = bootbox.dialog({
                        message: '<p class="text-center mb-0"><i class="fa-solid fa-spin fa-gear"></i> Integrando despesas no SAP...</p>',
                            closeButton: false
                     });


					$.post('@Url.Action("IntegrarDespesasSAP")', { listaRelatorios: listaRelatorios }, (result) => {
                        if (result.status) {
                            Alert(result.text, result.status);
                            ReloadDados(`#comp_${key}`);
                        }
                        else {
                            bootbox.alert({
                                title: '<span class="text-danger"><i class="fa fa-warning"></i> Erro ao integrar ao SAP</span>',
                                message: `<h4 style="word-break: break-all;"><b>${result.text}</b></h4><br/><small>${result.exception ?? ""}</small>`,
                                size: 'large'
                            })
                        }
					}, 'json')
                    .fail(function (xhr, status, error) {
                    	Alert("Ocorreu um erro: " + error, false);
					})
                    .always(function () {
                        $('button').prop('disabled', false);
                        dialog.modal('hide');
                    });
				}

			})






		}

	}

    const ExportarDespesas = (key) => {
        const listaRelatorios = GetRelatorios(key);
        if (listaRelatorios.length > 0) {

            var $form = $('<form>', {
                action: '@Url.Action("ExportarDespesas")',
                method: 'post'
            });
            listaRelatorios.forEach(function (id) {
                var $input = $('<input>', {
                    type: 'hidden',
                    name: 'listaRelatorios',
                    value: id
                });
                $form.append($input);
            });
            $form.appendTo('body').submit().remove();
        }
    }

    const IntegrarPagamentos = (key) => {
 
        const listaRelatorios = GetRelatoriosPag(key);
		if (listaRelatorios.length > 0) {

			const getCurrentDate = () => {
				var today = new Date();
				var day = ("0" + today.getDate()).slice(-2);
				var month = ("0" + (today.getMonth() + 1)).slice(-2);
				var year = today.getFullYear();
				return year + "-" + month + "-" + day;
			}

			bootbox.prompt({
				title: 'Informe a data de pagamento',
				inputType: 'date',
				value: getCurrentDate(),
				buttons: {
					confirm: {
						label: '<i class="fa fa-check"></i> OK',
						className: 'btn-success'
					},
					cancel: {
						label: '<i class="fa fa-times"></i> Cancelar',
						className: 'btn-danger'
					}
				},
				callback: function (dtPagamento) {
                    if (!dtPagamento) return;
                    let dialog = bootbox.dialog({
                        message: '<p class="text-center mb-0"><i class="fa-solid fa-spin fa-gear"></i> Integrando pagamento no vExpenses...</p>',
                        closeButton: false
                    });
					$('button').prop('disabled', true);
                    $.post('@Url.Action("IntegrarPagamentos")', { listaRelatorios: listaRelatorios, dtPagamento: dtPagamento }, (result) => {
                        if (result.status) {
                            Alert(result.text, result.status);
                            ReloadDados(`#comp_${key}`);
                        }
                        else {
                            bootbox.alert({
                                title: '<span class="text-danger"><i class="fa fa-warning"></i> Erro ao integrar ao SAP</span>',
                                message: `<h4 style="word-break: break-all;"><b>${result.text}</b></h4><br/><small>${result.exception ?? ""}</small>`,
                                size: 'large'
                            })
                        }
					}, 'json')
                    .fail(function (xhr, status, error) {
                    	Alert("Ocorreu um erro: " + error, false);
					})
                    .always(function () {
                        $('button').prop('disabled', false);
                        dialog.modal('hide');
                    });

				}
			});
		}
	}
</script>


<div class="boxConteiner">

    <div class="boxTitle">
        <i class="fa fa-filter"></i> Filtros de Pesquisa
    </div>

    <div class="boxContent">
        @using (Html.BeginForm("Index", "Relatorio", FormMethod.Get))
        {
            <div class="row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.RelatorioId)
                    @Html.TextBoxFor(model => model.RelatorioId, new { @class = "form-control" })
                </div>

                <div class="col-md-3">
                    <label>Data Início:</label>
                    @Html.TextBoxFor(model => model.DataInicio, new { @class = "form-control", type = "month" })
                </div>

                <div class="col-md-3">
                    <label>Data Fim:</label>
                    @Html.TextBoxFor(model => model.DataFim, new { @class = "form-control", type = "month" })
                </div>

                <div class="col-md-3">
                    @Html.LabelFor(model => model.Usuario)
                    @Html.DropDownList("Usuario", new SelectList(Model.Usuarios), "Todos", new { @class = "form-control" })
                </div>

                <div class="col-md-3">
                    @Html.LabelFor(model => model.StatusPagamento)
                    @Html.EnumDropDownListFor(model => model.StatusPagamento, "Selecione", new { @class = "form-control" })
                </div>

                <div class="col-md-3">
                    @Html.LabelFor(model => model.StatusIntegracao)
                    @Html.EnumDropDownListFor(model => model.StatusIntegracao, "Selecione", new { @class = "form-control" })
                </div>
            </div>
            <br />
            <button type="submit" class="btn btn-outline-primary"><i class="fa fa-search"></i> Pesquisar</button>
        }
    </div>



</div>

<br />

<div>
    <button class="btn btn-primary" onclick="BuscarApi()">
        <i class="fa-solid fa-globe"></i>
        <i class="fa-solid fa-download"></i>
        Consultar vExpenses
    </button>
</div>

@if (Model.Relatorios.Count == 0)
{
    <div class="col-md-12 model-zero">
        <span>Nenhum resultado encontrado</span>
    </div>
}
else
{
    <span class="sub-title">
        <i class="fa fa-calendar"></i>
        Competência
    </span>

    foreach (var item in Model.Relatorios
                                            .GroupBy(s => new { s.DataIntegracao.Year, s.DataIntegracao.Month })
                                            .OrderByDescending(s => s.Key.Year)
                                            .ThenByDescending(s => s.Key.Month))
    {
        int ano = item.FirstOrDefault().DataIntegracao.Year;
        int mes = item.FirstOrDefault().DataIntegracao.Month;
        string key = $"comp_{mes}_{ano}";
        CultureInfo culturePTBR = new CultureInfo("pt-BR");
        string nomeDoMes = culturePTBR.DateTimeFormat.GetMonthName(mes).Capitalize();
        <div class="monthConteiner">
            <div class="monthBox">
                <i class="fa fa-angle-right"></i>
                @ano - @nomeDoMes
            </div>

            <div class="monthContent" id="@key" data-mes="@mes" data-ano="@ano">
                @Html.Partial("_DadosRelatorio", item.Select(s => s).ToList())
            </div>
        </div>

    }




}